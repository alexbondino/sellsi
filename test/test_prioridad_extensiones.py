"""
üéØ Test Prioridad Extensiones - XLSM > XLSX
==========================================

Test espec√≠fico para verificar que HT. Gesti√≥n Finanzas
da prioridad ABSOLUTA a archivos .xlsm sobre .xlsx

Autor: GitHub Copilot
Fecha: 24 de Septiembre, 2025
"""

import os
import sys

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from components.excel_validator import ExcelValidator


def test_prioridad_xlsm_xlsx():
    """Test de prioridad XLSM > XLSX para HT. Gesti√≥n Finanzas"""

    print("üéØ TEST PRIORIDAD: XLSM > XLSX para HT. Gesti√≥n Finanzas")
    print("=" * 60)

    # Crear directorio de prueba
    test_dir = "test_prioridad_extension"
    if not os.path.exists(test_dir):
        os.makedirs(test_dir)

    # Crear AMBOS archivos: XLSM y XLSX de la misma versi√≥n
    archivos_test = [
        # AMBAS versiones del mismo archivo
        "HT. Gesti√≥n Finanzas_v22.2.xlsx",  # Extensi√≥n secundaria
        "HT. Gesti√≥n Finanzas_v22.2.xlsm",  # Extensi√≥n PRIORITARIA
        "MtM_v4.1_Macro.xlsm",  # Archivo macro normal
    ]

    print("üìÅ Creando archivos de prueba:")
    for archivo in archivos_test:
        filepath = os.path.join(test_dir, archivo)
        with open(filepath, "w") as f:
            f.write("Test content")

        # Marcar cu√°l es prioritario
        prioridad = (
            "üèÜ PRIORITARIO" if archivo.endswith(".xlsm") and "Finanzas" in archivo else "üìÑ"
        )
        print(f"   {prioridad} {archivo}")

    # Ejecutar validaci√≥n
    print("\nüîç Ejecutando validaci√≥n...")
    validator = ExcelValidator()
    is_valid, found_files, messages = validator.validate_directory(test_dir)

    # Verificar resultado
    print(f"\nüìä RESULTADO: {'‚úÖ V√ÅLIDO' if is_valid else '‚ùå INV√ÅLIDO'}")
    print(f"üìÅ Archivos detectados: {len(found_files)}")

    # Verificar espec√≠ficamente qu√© archivo de Finanzas se seleccion√≥
    finanzas_file = found_files.get("finanzas")

    print("\nüéØ VERIFICACI√ìN DE PRIORIDAD:")
    if finanzas_file:
        extension = os.path.splitext(finanzas_file.filename)[1].lower()
        print(f"   üìÑ Archivo seleccionado: {finanzas_file.filename}")
        print(f"   üìé Extensi√≥n: {extension}")

        if extension == ".xlsm":
            print("   ‚úÖ CORRECTO: Se seleccion√≥ .xlsm (prioridad)")
            print("   üèÜ La prioridad XLSM > XLSX funciona perfectamente")
        elif extension == ".xlsx":
            print("   ‚ö†Ô∏è ADVERTENCIA: Se seleccion√≥ .xlsx")
            print("   ‚ùì Puede indicar que no hab√≠a .xlsm disponible")
        else:
            print("   ‚ùå ERROR: Extensi√≥n inesperada")
    else:
        print("   ‚ùå No se encontr√≥ archivo de Finanzas")

    # Mostrar todos los archivos detectados
    print("\nüìã DETALLES DE ARCHIVOS DETECTADOS:")
    for file_type, file_info in found_files.items():
        config = validator.PATTERNS[file_type]
        extension = os.path.splitext(file_info.filename)[1]
        print(f"   üéØ {config['display_name']}:")
        print(f"      üìÑ Archivo: {file_info.filename}")
        print(f"      üìé Extensi√≥n: {extension}")
        print(f"      üî¢ Versi√≥n: {file_info.version}")

    # Mostrar mensajes de validaci√≥n
    print("\nüí¨ MENSAJES DE VALIDACI√ìN:")
    for message in messages:
        print(f"   {message}")

    # Limpieza
    import shutil

    if os.path.exists(test_dir):
        shutil.rmtree(test_dir)
        print(f"\nüóëÔ∏è Limpiado: {test_dir}")

    return finanzas_file and finanzas_file.filename.endswith(".xlsm")


def test_solo_xlsx():
    """Test cuando solo hay .xlsx disponible (sin .xlsm)"""

    print("\n" + "=" * 60)
    print("üß™ TEST FALLBACK: Solo .xlsx disponible")
    print("=" * 60)

    # Crear directorio de prueba
    test_dir = "test_solo_xlsx"
    if not os.path.exists(test_dir):
        os.makedirs(test_dir)

    # Crear solo archivo .xlsx (sin .xlsm)
    archivos_test = [
        "HT. Gesti√≥n Finanzas_v22.2.xlsx",  # Solo xlsx
        "MtM_v4.1_Macro.xlsm",  # Archivo macro normal
    ]

    print("üìÅ Creando solo archivo .xlsx:")
    for archivo in archivos_test:
        filepath = os.path.join(test_dir, archivo)
        with open(filepath, "w") as f:
            f.write("Test content")
        print(f"   üìÑ {archivo}")

    # Validar
    validator = ExcelValidator()
    is_valid, found_files, messages = validator.validate_directory(test_dir)

    finanzas_file = found_files.get("finanzas")

    print(f"\nüìä RESULTADO: {'‚úÖ V√ÅLIDO' if is_valid else '‚ùå INV√ÅLIDO'}")

    if finanzas_file:
        print(f"üìÑ Archivo seleccionado: {finanzas_file.filename}")
        extension = os.path.splitext(finanzas_file.filename)[1].lower()
        if extension == ".xlsx":
            print("‚úÖ CORRECTO: Fallback a .xlsx cuando no hay .xlsm")
        else:
            print("‚ùå ERROR: Extensi√≥n inesperada")

    # Limpieza
    import shutil

    if os.path.exists(test_dir):
        shutil.rmtree(test_dir)
        print(f"\nüóëÔ∏è Limpiado: {test_dir}")

    return is_valid


def test_multiple_versions_with_priority():
    """Test con m√∫ltiples versiones y extensiones mixtas"""

    print("\n" + "=" * 60)
    print("üß™ TEST COMPLEJO: M√∫ltiples versiones + extensiones mixtas")
    print("=" * 60)

    test_dir = "test_mixto"
    if not os.path.exists(test_dir):
        os.makedirs(test_dir)

    # Crear m√∫ltiples archivos con versiones y extensiones mixtas
    archivos_test = [
        "HT. Gesti√≥n Finanzas_v21.1.xlsx",  # Versi√≥n vieja xlsx
        "HT. Gesti√≥n Finanzas_v22.2.xlsm",  # Versi√≥n nueva xlsm ‚Üê DEBER√çA GANAR
        "HT. Gesti√≥n Finanzas_v23.0.xlsx",  # Versi√≥n m√°s nueva xlsx
        "MtM_v4.1_Macro.xlsm",
    ]

    print("üìÅ Creando archivos mixtos:")
    for archivo in archivos_test:
        filepath = os.path.join(test_dir, archivo)
        with open(filepath, "w") as f:
            f.write("Test content")

        if "Finanzas" in archivo and archivo.endswith(".xlsm"):
            print(f"   üèÜ {archivo} ‚Üê DEBER√çA SER SELECCIONADO (.xlsm)")
        else:
            print(f"   üìÑ {archivo}")

    # Validar
    validator = ExcelValidator()
    is_valid, found_files, messages = validator.validate_directory(test_dir)

    finanzas_file = found_files.get("finanzas")

    print(f"\nüìä RESULTADO: {'‚úÖ V√ÅLIDO' if is_valid else '‚ùå INV√ÅLIDO'}")

    if finanzas_file:
        print(f"üéØ ARCHIVO SELECCIONADO: {finanzas_file.filename}")
        extension = os.path.splitext(finanzas_file.filename)[1].lower()

        if extension == ".xlsm":
            print("‚úÖ EXCELENTE: Se seleccion√≥ .xlsm a pesar de haber .xlsx m√°s nuevos")
            print("üèÜ La prioridad XLSM > XLSX est√° funcionando perfectamente")
        else:
            print(f"‚ö†Ô∏è Se seleccion√≥ .xlsx: {finanzas_file.filename}")

    # Limpieza
    import shutil

    if os.path.exists(test_dir):
        shutil.rmtree(test_dir)
        print(f"\nüóëÔ∏è Limpiado: {test_dir}")

    return finanzas_file and finanzas_file.filename.endswith(".xlsm")


if __name__ == "__main__":
    print("üöÄ INICIANDO TESTS DE PRIORIDAD DE EXTENSIONES")
    print("=" * 60)

    try:
        # Test principal de prioridad
        resultado1 = test_prioridad_xlsm_xlsx()

        # Test de fallback
        resultado2 = test_solo_xlsx()

        # Test complejo
        resultado3 = test_multiple_versions_with_priority()

        # Resumen final
        print("\n" + "=" * 60)
        print("üìä RESUMEN DE TESTS:")
        print(f"   üéØ Prioridad XLSM > XLSX: {'‚úÖ' if resultado1 else '‚ùå'}")
        print(f"   üîÑ Fallback a XLSX: {'‚úÖ' if resultado2 else '‚ùå'}")
        print(f"   üß™ Caso complejo: {'‚úÖ' if resultado3 else '‚ùå'}")

        if resultado1 and resultado2 and resultado3:
            print("\nüéä ¬°TODOS LOS TESTS EXITOSOS!")
            print("üèÜ La prioridad XLSM > XLSX funciona perfectamente")
        else:
            print("\n‚ö†Ô∏è Algunos tests fallaron")

        print("=" * 60)

    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        import traceback

        traceback.print_exc()
