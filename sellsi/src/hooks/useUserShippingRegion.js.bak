import { useState, useEffect, useRef } from 'react';
import { getUserProfile } from '../services/user';

/**
 * Hook para manejar la regi√≥n de env√≠o del usuario
 * - localStorage para performance y sincronizaci√≥n local
 * - Fallback a base de datos si no existe en localStorage
 * - Polling ligero para detectar cambios entre dispositivos
 */
export const useUserShippingRegion = () => {
  const [userRegion, setUserRegion] = useState(null);
  const [isLoadingUserRegion, setIsLoadingUserRegion] = useState(true);
  const intervalRef = useRef(null);
  const userIdRef = useRef(null);
  const lastCheckedRef = useRef(null);

  useEffect(() => {
    const initializeUserRegion = async () => {
      try {
        setIsLoadingUserRegion(true);
        
        // Obtener user_id
        const userId = localStorage.getItem('user_id');
        if (!userId) {
          setIsLoadingUserRegion(false);
          return;
        }
        
        userIdRef.current = userId;

        // 1. Intentar obtener desde localStorage primero (performance)
        const cachedRegion = localStorage.getItem('user_shipping_region');
        if (cachedRegion) {
          setUserRegion(cachedRegion);
          lastCheckedRef.current = cachedRegion;
          setIsLoadingUserRegion(false);
        }

        // 2. Verificar con base de datos (siempre, para asegurar consistencia)
        const { data: profile } = await getUserProfile(userId);
        const currentRegion = profile?.shipping_region || null;
        
        // Actualizar solo si es diferente a lo cacheado
        if (currentRegion !== cachedRegion) {
          setUserRegion(currentRegion);
          lastCheckedRef.current = currentRegion;
          
          // Actualizar localStorage
          if (currentRegion) {
            localStorage.setItem('user_shipping_region', currentRegion);
          } else {
            localStorage.removeItem('user_shipping_region');
          }
        }

        // 3. Configurar polling ligero (cada 2 minutos)
        intervalRef.current = setInterval(async () => {
          try {
            const { data: profile } = await getUserProfile(userId);
            const newRegion = profile?.shipping_region || null;
            
            if (newRegion !== lastCheckedRef.current) {
              console.log('üîÑ Regi√≥n actualizada desde otro dispositivo:', newRegion);
              setUserRegion(newRegion);
              lastCheckedRef.current = newRegion;
              
              // Actualizar localStorage
              if (newRegion) {
                localStorage.setItem('user_shipping_region', newRegion);
              } else {
                localStorage.removeItem('user_shipping_region');
              }
            }
          } catch (error) {
            console.error('Error verificando cambios de regi√≥n:', error);
          }
        }, 120000); // 2 minutos
              event: 'UPDATE',
              schema: 'public',
              table: 'shipping_info',
              filter: `user_id=eq.${userId}`,
            },
            (payload) => {
              console.log('ÔøΩ Realtime: Regi√≥n actualizada desde otro dispositivo');
              const newRegion = payload.new?.shipping_region || null;
              setUserRegion(newRegion);
              
              // Actualizar localStorage
              if (newRegion) {
                localStorage.setItem('user_shipping_region', newRegion);
              } else {
                localStorage.removeItem('user_shipping_region');
              }
            }
          )
          .subscribe();

      } catch (error) {
        console.error('Error inicializando regi√≥n del usuario:', error);
        setUserRegion(null);
      } finally {
        setIsLoadingUserRegion(false);
      }
    };

    // Escuchar cambios en localStorage (para cambios en el mismo dispositivo)
    const handleStorageChange = (e) => {
      if (e.key === 'user_shipping_region') {
        setUserRegion(e.newValue);
      }
    };

    // Inicializar
    initializeUserRegion();

    // Escuchar cambios en localStorage
    window.addEventListener('storage', handleStorageChange);

    return () => {
      // ‚úÖ Limpiar suscripci√≥n Realtime
      if (channelRef.current) {
        supabase.removeChannel(channelRef.current);
      }
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

  // ‚úÖ Funci√≥n para forzar actualizaci√≥n manual (opcional)
  const refreshRegion = async () => {
    if (!userIdRef.current) return;
    
    try {
      setIsLoadingUserRegion(true);
      const { data: profile } = await getUserProfile(userIdRef.current);
      const region = profile?.shipping_region || null;
      setUserRegion(region);
      
      // Actualizar localStorage
      if (region) {
        localStorage.setItem('user_shipping_region', region);
      } else {
        localStorage.removeItem('user_shipping_region');
      }
    } catch (error) {
      console.error('Error actualizando regi√≥n manualmente:', error);
    } finally {
      setIsLoadingUserRegion(false);
    }
  };

  return { userRegion, isLoadingUserRegion, refreshRegion };
};
