"""
Popup de Configuraci√≥n de Macros para MtM Automation
Autor: GitHub Copilot
Fecha: 25 de Septiembre, 2025

Popup modal que muestra instrucciones detalladas para configurar Excel
para permitir macros antes de proceder con la valorizaci√≥n MtM.
"""

import tkinter as tk
from tkinter import ttk
import os
from PIL import Image, ImageTk
import threading
import time
from typing import Optional


class MacroConfigPopup:
    """
    Popup modal que muestra instrucciones para configurar macros en Excel
    
    Caracter√≠sticas:
    - Muestra imagen de instrucciones de 950x950 p√≠xeles
    - Texto instructivo debajo de la imagen
    - Bot√≥n "Confirmo que esto ya lo hice" deshabilitado por 3 segundos
    - Modal (bloquea la aplicaci√≥n principal hasta confirmar)
    """
    
    def __init__(self, parent_window: Optional[tk.Tk] = None):
        """
        Args:
            parent_window: Ventana padre para centrar el popup
        """
        self.parent_window = parent_window
        self.popup: Optional[tk.Toplevel] = None
        self.confirmed = False
        self.confirm_button: Optional[tk.Button] = None
        self.instructions_image = None  # Para mantener referencia de la imagen
        
    def show_popup(self) -> bool:
        """
        Muestra el popup modal y espera confirmaci√≥n del usuario
        
        Returns:
            bool: True si el usuario confirm√≥, False si cancel√≥
        """
        print("üîß [DEBUG] Iniciando popup de configuraci√≥n de macros...")
        
        self._create_popup()
        if self.popup is None:
            print("‚ùå [ERROR] No se pudo crear el popup")
            return False
            
        self._setup_layout()
        self._start_countdown()
        
        # Centrar en pantalla o respecto al padre
        self._center_popup()
        
        # Hacer modal - solo si popup no es None
        if self.popup is not None:
            if self.parent_window:
                self.popup.transient(self.parent_window)
            self.popup.grab_set()
            self.popup.focus_set()
            
            print("‚úÖ [DEBUG] Popup configurado y mostrado")
        
        # Esperar hasta que se cierre
        if self.popup is not None:
            self.popup.wait_window()
        
        print(f"üîß [DEBUG] Popup cerrado. Usuario confirm√≥: {self.confirmed}")
        return self.confirmed
    
    def _create_popup(self):
        """Crea la ventana popup principal"""
        self.popup = tk.Toplevel()
        self.popup.title("üîß Configuraci√≥n de Macros - IMPORTANTE")
        self.popup.geometry("1320x824")  # Incrementado 10% en ancho y alto
        self.popup.resizable(True, True)  # PERMITIR redimensionar y mover
        
        # Configurar cierre
        self.popup.protocol("WM_DELETE_WINDOW", self._on_cancel)
        
        # Estilo
        self.popup.configure(bg="#f8f9fa")
        
        # Hacer que aparezca en primer plano pero permitir mover
        self.popup.attributes('-topmost', True)
        
        # Permitir que se mueva libremente
        self.popup.focus_force()  # Forzar foco
        
        print("üîß [DEBUG] Popup creado con tama√±o 1320x824 (layout ampliado +10%)")
        
    def _setup_layout(self):
        """Configura el layout principal del popup"""
        # Frame principal SIN expand=True para controlar mejor el espacio
        main_frame = tk.Frame(self.popup, bg="#f8f9fa", padx=30, pady=20)
        main_frame.pack(fill=tk.X)  # Solo fill X, no BOTH, y NO expand
        
        # T√≠tulo principal
        title_label = tk.Label(
            main_frame,
            text="üö® CONFIGURACI√ìN REQUERIDA DE MACROS",
            font=("Arial", 18, "bold"),
            fg="#dc3545",
            bg="#f8f9fa"
        )
        title_label.pack(pady=(0, 15))
        
        # Subt√≠tulo
        subtitle_label = tk.Label(
            main_frame,
            text="Para que la Valorizaci√≥n MtM funcione correctamente, necesitas habilitar las macros en Excel.",
            font=("Arial", 12),
            fg="#6c757d",
            bg="#f8f9fa",
            wraplength=1300
        )
        subtitle_label.pack(pady=(0, 20))
        
        # Frame del contenido - ALTURA FIJA para evitar que se expanda
        content_frame = tk.Frame(main_frame, bg="#f8f9fa", height=605)  # Altura incrementada 10%
        content_frame.pack(fill=tk.X, pady=(0, 20))  # Solo fill X
        content_frame.pack_propagate(False)  # CR√çTICO: evitar que se redimensione autom√°ticamente
        
        # Cargar y mostrar imagen a la IZQUIERDA
        self._setup_image(content_frame)
        
        # Setup texto de instrucciones a la DERECHA de la imagen
        self._setup_instructions(content_frame)
        
        # Frame de botones al final - SIEMPRE VISIBLE
        button_frame = tk.Frame(main_frame, bg="#f8f9fa")
        button_frame.pack(fill=tk.X, pady=(15, 0))
        
        self._setup_buttons(button_frame)

    def _setup_image(self, parent):
        """Configura y muestra la imagen de instrucciones"""
        image_frame = tk.Frame(parent, bg="#f8f9fa")
        image_frame.pack(side=tk.LEFT, padx=(0, 15))  # Reducido margen: era 20, ahora 15
        
        try:
            # Buscar imagen en automation/shared/images/
            base_path = os.path.dirname(os.path.dirname(__file__))  # Subir dos niveles desde validacion
            image_path = os.path.join(base_path, "images", "instrucciones.png")
            
            if os.path.exists(image_path):
                # Cargar imagen y redimensionar si es necesario
                pil_image = Image.open(image_path)
                
                # Convertir a RGB si es necesario
                if pil_image.mode != 'RGB':
                    pil_image = pil_image.convert('RGB')
                
                original_width, original_height = pil_image.size
                print(f"üñºÔ∏è  Imagen original: {original_width}x{original_height}")
                
                # Redimensionar para que quepa bien en el layout horizontal
                max_size = 600  # Aumentado 15%: era 500, ahora 575 (500 * 1.15)
                if original_width > max_size or original_height > max_size:
                    ratio = min(max_size / original_width, max_size / original_height)
                    new_width = int(original_width * ratio)
                    new_height = int(original_height * ratio)
                    pil_image = pil_image.resize((new_width, new_height), Image.Resampling.LANCZOS)
                    print(f"üñºÔ∏è  Imagen redimensionada a: {new_width}x{new_height}")
                
                # Crear PhotoImage y mantener referencia
                self.instructions_image = ImageTk.PhotoImage(pil_image)
                
                image_label = tk.Label(
                    image_frame,
                    image=self.instructions_image,
                    bg="#f8f9fa",
                    relief=tk.RAISED,
                    bd=2
                )
                image_label.pack()
                
            else:
                # Crear un placeholder visual
                placeholder_label = tk.Label(
                    image_frame,
                    text=f"üìä\\n[instrucciones.png]\\nNO ENCONTRADA\\n\\nImagen de\\nInstrucciones\\nExcel\\n\\nVerifica: {image_path}",
                    font=("Arial", 11),
                    fg="#dc3545",
                    bg="#ffe6e6",
                    width=80,
                    height=30,
                    justify=tk.CENTER,
                    relief=tk.RAISED,
                    bd=2
                )
                placeholder_label.pack()
                
        except ImportError:
            # Fallback si PIL no est√° disponible
            error_label = tk.Label(
                image_frame,
                text="‚ö†Ô∏è\\nPIL no disponible\\n\\nInstala Pillow:\\npip install Pillow\\n\\nImagen:\\ninstrucciones.png",
                font=("Arial", 11),
                fg="#dc3545",
                bg="#f8f9fa",
                width=60,
                height=25,
                justify=tk.CENTER,
                relief=tk.RAISED,
                bd=1
            )
            error_label.pack()
        except Exception as e:
            # Fallback en caso de error
            error_label = tk.Label(
                image_frame,
                text=f"‚ùå\\nError cargando\\ninstrucciones\\n\\n{type(e).__name__}\\n{str(e)[:30]}...",
                font=("Arial", 11),
                fg="#dc3545",
                bg="#ffe6e6",
                width=60,
                height=25,
                justify=tk.CENTER,
                relief=tk.RAISED,
                bd=1
            )
            error_label.pack()
    
    def _setup_instructions(self, parent):
        """Configura el panel de instrucciones detalladas"""
        # Frame de texto a la DERECHA de la imagen
        text_frame = tk.Frame(parent, bg="#ffffff", relief=tk.RAISED, bd=2)
        text_frame.pack(side=tk.RIGHT, fill=tk.BOTH, padx=(10, 0))  # Vuelve a fill BOTH
        
        # Scrollbar para el texto
        scrollbar = tk.Scrollbar(text_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Text widget con scroll para instrucciones detalladas
        self.instructions_text = tk.Text(
            text_frame,
            wrap=tk.WORD,
            width=50,   # RESTAURADO: vuelve a ser 50 caracteres (era 42)
            height=22,  # Mantengo 22 para dejar espacio a botones
            font=("Arial", 10),
            bg="#ffffff",
            fg="#212529",
            relief=tk.FLAT,
            bd=0,
            padx=15,
            pady=15,
            yscrollcommand=scrollbar.set
        )
        self.instructions_text.pack(side=tk.LEFT, fill=tk.BOTH)
        scrollbar.config(command=self.instructions_text.yview)
        
        # Texto de instrucciones m√°s detallado
        instructions_text = """ÔøΩ C√ìMO HABILITAR MACROS EN EXCEL - GU√çA PASO A PASO

Para que la Valorizaci√≥n MtM funcione correctamente, Excel debe estar configurado para permitir la ejecuci√≥n de macros. Este es un cambio de seguridad que debes hacer UNA SOLA VEZ.

‚ö†Ô∏è  IMPORTANTE: Realiza estos pasos ANTES de continuar con la valorizaci√≥n.

üìã PASOS DETALLADOS:

1Ô∏è‚É£ ABRIR CUALQUIER ARCHIVO EXCEL
   ‚Ä¢ Abre Microsoft Excel (puede ser un archivo en blanco o cualquier archivo .xlsx/.xlsm)
   ‚Ä¢ No importa qu√© archivo abras, la configuraci√≥n se aplica a todo Excel

2Ô∏è‚É£ ACCEDER AL MEN√ö ARCHIVO
   ‚Ä¢ En la esquina superior izquierda, haz clic en "Archivo" (File)
   ‚Ä¢ Se abrir√° el men√∫ principal de opciones de Excel

3Ô∏è‚É£ IR A OPCIONES
   ‚Ä¢ En el men√∫ lateral izquierdo, busca y haz clic en "Opciones" (Options)
   ‚Ä¢ Est√° usualmente al final de la lista, cerca de "Salir de Excel"

4Ô∏è‚É£ ABRIR CENTRO DE CONFIANZA
   ‚Ä¢ En la ventana de Opciones de Excel, busca en el panel izquierdo
   ‚Ä¢ Haz clic en "Centro de confianza" (Trust Center)
   ‚Ä¢ Es una de las √∫ltimas opciones en la lista

5Ô∏è‚É£ CONFIGURACI√ìN DEL CENTRO DE CONFIANZA
   ‚Ä¢ Dentro de la secci√≥n Centro de confianza
   ‚Ä¢ Haz clic en el bot√≥n "Configuraci√≥n del Centro de confianza..." 
   ‚Ä¢ Se abrir√° una nueva ventana con opciones de seguridad

6Ô∏è‚É£ SELECCIONAR CONFIGURACI√ìN DE MACROS
   ‚Ä¢ En la nueva ventana, busca "Configuraci√≥n de macros" en el panel izquierdo
   ‚Ä¢ Haz clic en esta opci√≥n para ver las opciones de macros

7Ô∏è‚É£ HABILITAR TODAS LAS MACROS
   ‚Ä¢ Selecciona la opci√≥n "Habilitar todas las macros (no recomendado; puede ejecutarse c√≥digo potencialmente peligroso)"
   ‚Ä¢ Esta es la √∫nica opci√≥n que permite que funcione la valorizaci√≥n MtM

8Ô∏è‚É£ APLICAR CAMBIOS
   ‚Ä¢ Haz clic en "Aceptar" en la ventana del Centro de confianza
   ‚Ä¢ Haz clic en "Aceptar" nuevamente en la ventana de Opciones de Excel

9Ô∏è‚É£ CERRAR EXCEL COMPLETAMENTE
   ‚Ä¢ CR√çTICO: Cierra Excel completamente despu√©s de hacer estos cambios
   ‚Ä¢ Si Excel est√° abierto cuando ejecutes el bot, la valorizaci√≥n FALLAR√Å

üí° NOTAS ADICIONALES:

‚úÖ Esta configuraci√≥n es permanente - solo necesitas hacerla UNA VEZ por computadora.

‚úÖ Despu√©s de configurar, puedes usar la valorizaci√≥n MtM normalmente.

‚ö†Ô∏è NUNCA ejecutes el bot si Excel est√° abierto - siempre ci√©rralo primero.

üîí Esta configuraci√≥n es espec√≠fica de tu instalaci√≥n de Excel y no afecta otros programas.

üìß Si tienes problemas, contacta con Klaus."""
        
        self.instructions_text.insert(tk.END, instructions_text)
        self.instructions_text.config(state=tk.DISABLED)  # Solo lectura

    def _setup_buttons(self, parent):
        """Configura los botones del popup"""
        # Bot√≥n cancelar (izquierda)
        cancel_button = tk.Button(
            parent,
            text="‚ùå Cancelar",
            command=self._on_cancel,
            font=("Arial", 12, "bold"),
            bg="#dc3545",
            fg="white",
            width=20,
            height=2,
            relief=tk.RAISED,
            bd=2
        )
        cancel_button.pack(side=tk.LEFT, padx=(0, 20))
        
        # Bot√≥n confirmar (derecha) - Deshabilitado inicialmente con countdown profesional
        self.confirm_button = tk.Button(
            parent,
            text="Confirmo que ya configur√© las macros (disponible en 5s)",
            command=self._on_confirm,
            font=("Arial", 12, "bold"),
            bg="#e9ecef",  # Gris muy claro para mayor contraste con el texto
            fg="#495057",  # Texto gris oscuro para mejor legibilidad
            width=50,
            height=2,
            state=tk.DISABLED,
            relief=tk.RAISED,
            bd=2
        )
        self.confirm_button.pack(side=tk.RIGHT)
        
    def _start_countdown(self):
        """Inicia el countdown de 3 segundos en un hilo separado"""
        countdown_thread = threading.Thread(target=self._countdown_worker, daemon=True)
        countdown_thread.start()
        
    def _countdown_worker(self):
        """Trabajador del countdown en hilo separado - 5 segundos"""
        for i in range(5, 0, -1):
            if self.popup is None:  # Si se cerr√≥ el popup, salir
                return
                
            # Actualizar texto del bot√≥n en el hilo principal
            self.popup.after(0, lambda count=i: self._update_button_text(count))
            time.sleep(1)
        
        # Habilitar bot√≥n al final
        if self.popup is not None:
            self.popup.after(0, self._enable_button)
    
    def _update_button_text(self, count):
        """Actualiza el texto del bot√≥n con el contador profesional"""
        if self.confirm_button is not None:
            if count >= 2:
                self.confirm_button.config(
                    text=f"Confirmo que ya configur√© las macros (disponible en {count}s)",
                    bg="#f8f9fa",  # Gris muy claro para m√°ximo contraste
                    fg="#343a40"   # Texto gris oscuro para excelente legibilidad
                )
            elif count == 1:
                self.confirm_button.config(
                    text="Confirmo que ya configur√© las macros (disponible en 1s)",
                    bg="#dee2e6",  # Gris claro - transici√≥n suave
                    fg="#495057"   # Texto m√°s oscuro para contraste
                )
    
    def _enable_button(self):
        """Habilita el bot√≥n de confirmaci√≥n con estilo profesional"""
        if self.confirm_button is not None:
            self.confirm_button.config(
                text="‚úì Confirmo que ya configur√© las macros",
                state=tk.NORMAL,
                bg="#06EFFF",  # Cyan calipso igual que el bot√≥n EJECUTAR
                fg="black"
            )
    
    def _center_popup(self):
        """Centra el popup en la pantalla principal (no entre m√∫ltiples pantallas)"""
        if self.popup is None:
            return
            
        self.popup.update_idletasks()
        
        if self.parent_window:
            try:
                # Intentar centrar respecto a la ventana padre
                parent_x = self.parent_window.winfo_x()
                parent_y = self.parent_window.winfo_y()
                parent_width = self.parent_window.winfo_width()
                parent_height = self.parent_window.winfo_height()
                
                x = parent_x + (parent_width - 1320) // 2
                y = parent_y + (parent_height - 824) // 2
                
                # Asegurar que est√© dentro de l√≠mites razonables
                x = max(0, x)
                y = max(0, y)
                
                print(f"üîß [DEBUG] Centrando en ventana padre: {x},{y}")
                
            except:
                # Si falla, usar pantalla principal
                x = 100  # Esquina superior izquierda de la pantalla principal
                y = 50
                print(f"üîß [DEBUG] Fallback: posici√≥n fija {x},{y}")
        else:
            # Posicionar en la pantalla principal, no centrar entre m√∫ltiples
            x = 200  # Un poco hacia la derecha de la esquina
            y = 100  # Un poco hacia abajo
            print(f"üîß [DEBUG] Sin ventana padre: posici√≥n fija {x},{y}")
        
        self.popup.geometry(f"1320x824+{x}+{y}")
        
        # Despu√©s de posicionar, quitar topmost para permitir movimiento
        if self.popup is not None:
            self.popup.after(100, lambda: self.popup.attributes('-topmost', False) if self.popup else None)
    
    def _on_confirm(self):
        """Maneja la confirmaci√≥n del usuario"""
        self.confirmed = True
        if self.popup:
            self.popup.destroy()
            self.popup = None
    
    def _on_cancel(self):
        """Maneja la cancelaci√≥n del usuario"""
        self.confirmed = False
        if self.popup:
            self.popup.destroy()
            self.popup = None


def show_macro_config_popup(parent_window=None):
    """
    Funci√≥n wrapper para mostrar el popup de configuraci√≥n de macros
    
    Args:
        parent_window: Ventana padre (opcional)
        
    Returns:
        bool: True si el usuario confirm√≥, False si cancel√≥
    """
    popup = MacroConfigPopup(parent_window)
    return popup.show_popup()


def test_popup():
    """Funci√≥n de prueba para el popup"""
    root = tk.Tk()
    root.withdraw()  # Ocultar ventana principal
    
    popup = MacroConfigPopup(root)
    result = popup.show_popup()
    
    print(f"Usuario confirm√≥: {result}")
    root.quit()


if __name__ == "__main__":
    test_popup()