"""
Excel Automation Module - Paso 2 MtM
Autor: GitHub Copilot
Fecha: 29 de Septiembre, 2025

M√≥dulo especializado para automatizaci√≥n de Excel en el Paso 2 del proceso MtM.
Maneja la escritura autom√°tica en celda I14 y ejecuci√≥n de macros VBA.
"""

import os
import time
from typing import Optional, Callable


class ExcelAutomator:
    """
    Automatizador de Excel para el proceso MtM Paso 2
    
    Funcionalidades:
    - Escritura autom√°tica en celda I14 (carpeta de descarga)
    - Ejecuci√≥n autom√°tica de macros VBA
    - Manejo de errores y fallbacks
    - Logging integrado
    """
    
    def __init__(self, log_callback: Optional[Callable] = None):
        """
        Inicializa el automatizador de Excel
        
        Args:
            log_callback: Funci√≥n de logging para reportar progreso
        """
        self.log = log_callback if log_callback else self._default_log
        
    def _default_log(self, message: str, level: str = "INFO"):
        """Log por defecto si no se proporciona callback"""
        print(f"[{level}] {message}")
    
    def escribir_carpeta_en_celda(self, excel_file_path: str, carpeta_descarga: str) -> bool:
        """
        Escribe autom√°ticamente la carpeta de descarga en la celda I14
        
        Args:
            excel_file_path: Ruta completa del archivo Excel (.xlsm)
            carpeta_descarga: Ruta de la carpeta de descarga
            
        Returns:
            bool: True si la escritura fue exitosa, False en caso contrario
        """
        try:
            self.log("üîß [DEBUG] Iniciando escritura autom√°tica en Excel", level="DEBUG")
            self.log(f"üîß [DEBUG] Archivo: {excel_file_path}", level="DEBUG")
            self.log(f"üîß [DEBUG] Carpeta: {carpeta_descarga}", level="DEBUG")
            
            # Verificar que el archivo existe
            if not os.path.exists(excel_file_path):
                self.log(f"‚ùå Archivo Excel no existe: {excel_file_path}", level="ERROR")
                return False
            
            # Intentar usar openpyxl (m√©todo preferido)
            try:
                from openpyxl import load_workbook
                
                self.log("üìù Escribiendo carpeta de descarga en Excel...", level="INFO")
                
                # Cargar el workbook preservando VBA
                wb = load_workbook(excel_file_path, keep_vba=True)
                self.log("üîß [DEBUG] Workbook cargado exitosamente", level="DEBUG")
                
                # Buscar hoja "Contratos" (case-insensitive)
                hoja_contratos = None
                for hoja_name in wb.sheetnames:
                    if hoja_name.lower() == "contratos":
                        hoja_contratos = hoja_name
                        break
                
                if not hoja_contratos:
                    self.log("‚ö†Ô∏è Hoja 'Contratos' no encontrada en Excel", level="ADVERTENCIA")
                    self.log(f"üìã Hojas disponibles: {', '.join(wb.sheetnames)}", level="INFO")
                    wb.close()
                    return False
                
                # Seleccionar hoja y escribir en I14
                ws = wb[hoja_contratos]
                valor_anterior = ws["I14"].value
                
                ws["I14"] = carpeta_descarga
                self.log(f"üîß [DEBUG] I14: '{valor_anterior}' ‚Üí '{carpeta_descarga}'", level="DEBUG")
                
                # Guardar cambios
                wb.save(excel_file_path)
                wb.close()
                
                self.log(f"‚úÖ Carpeta configurada en I14: {carpeta_descarga}", level="EXITO")
                return True
                
            except ImportError:
                self.log("‚ö†Ô∏è openpyxl no disponible", level="ADVERTENCIA")
                self.log("üí° Instala openpyxl: pip install openpyxl", level="INFO")
                return False
            except Exception as e:
                self.log(f"‚ùå Error con openpyxl: {type(e).__name__}: {e}", level="ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error general escribiendo en Excel: {e}", level="ERROR")
            return False
    
    def ejecutar_macro_vba(self, excel_file_path: str, modulo_vba: str, macro_name: str) -> bool:
        """
        Ejecuta un macro VBA espec√≠fico usando COM automation
        
        Args:
            excel_file_path: Ruta completa del archivo Excel (.xlsm)
            modulo_vba: Nombre del m√≥dulo VBA (ej: "LimpiarTablas")
            macro_name: Nombre del macro (ej: "LimpiarTablasContratos")
            
        Returns:
            bool: True si la ejecuci√≥n fue exitosa, False en caso contrario
        """
        try:
            self.log(f"‚ö° Preparando ejecuci√≥n de macro: {modulo_vba}.{macro_name}", level="INFO")
            
            try:
                import win32com.client
                
                self.log("üìã Conectando con Excel via COM...", level="INFO")
                
                # Conectar con Excel
                excel_app = win32com.client.Dispatch("Excel.Application")
                excel_app.Visible = True  # Mostrar Excel para feedback visual
                excel_app.DisplayAlerts = False  # Evitar di√°logos durante ejecuci√≥n
                
                # Abrir archivo Excel
                self.log(f"üìÇ Abriendo archivo: {os.path.basename(excel_file_path)}", level="INFO")
                workbook = excel_app.Workbooks.Open(excel_file_path)
                
                # Esperar carga completa
                time.sleep(2)
                
                # Ejecutar macro
                macro_completo = f"{modulo_vba}.{macro_name}"
                self.log(f"üöÄ Ejecutando macro: {macro_completo}", level="INFO")
                excel_app.Run(macro_completo)
                
                # Guardar cambios autom√°ticamente
                self.log("üíæ Guardando cambios autom√°ticamente...", level="INFO")
                workbook.Save()
                
                # Restaurar alertas pero NO cerrar Excel
                excel_app.DisplayAlerts = True
                self.log("‚úÖ Macro ejecutado exitosamente", level="EXITO")
                self.log("üìã Excel permanece abierto para trabajo manual", level="INFO")
                
                return True
                
            except ImportError:
                self.log("‚ö†Ô∏è win32com no disponible", level="ADVERTENCIA")
                self.log("üí° Instala pywin32: pip install pywin32", level="INFO")
                return False
            except Exception as e:
                self.log(f"‚ùå Error ejecutando macro: {type(e).__name__}: {e}", level="ERROR")
                self.log(f"üîß [DEBUG] Detalles: {str(e)}", level="DEBUG")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error general en ejecuci√≥n de macro: {e}", level="ERROR")
            return False
    
    def proceso_completo_paso2(self, excel_file_path: str, carpeta_descarga: str, 
                              modulo_vba: str = "LimpiarTablas", 
                              macro_name: str = "LimpiarTablasContratos") -> bool:
        """
        Ejecuta el proceso completo del Paso 2: Escritura + Macros en secuencia
        
        Args:
            excel_file_path: Ruta del archivo Excel MtM
            carpeta_descarga: Carpeta de descarga a configurar
            modulo_vba: M√≥dulo VBA que contiene el primer macro
            macro_name: Nombre del primer macro a ejecutar
            
        Returns:
            bool: True si todo el proceso fue exitoso
        """
        self.log("üöÄ INICIANDO PROCESO COMPLETO PASO 2", level="INFO")
        
        # Paso 1: Escribir carpeta en I14 (archivo cerrado)
        self.log("üìù FASE 1: Configurando carpeta en celda I14...", level="INFO")
        if not self.escribir_carpeta_en_celda(excel_file_path, carpeta_descarga):
            self.log("‚ùå Error en Fase 1 - Abortando proceso", level="ERROR")
            return False
        
        # Paso 2: Ejecutar macro de limpieza (archivo abierto)
        self.log("‚ö° FASE 2: Ejecutando macro de limpieza autom√°tica...", level="INFO")
        if not self.ejecutar_macro_vba(excel_file_path, modulo_vba, macro_name):
            self.log("‚ùå Error en Fase 2 - Proceso incompleto", level="ERROR")
            # Intentar abrir Excel manualmente como fallback
            self._fallback_abrir_excel(excel_file_path)
            return False
        
        # Paso 3: Ejecutar macro de seleccionar directorio
        self.log("üìÇ FASE 3: Ejecutando macro de selecci√≥n de directorio...", level="INFO")
        if not self.ejecutar_macro_vba(excel_file_path, "CopiarTablas", "SeleccionarDirectorioGuardarEnCeldas"):
            self.log("‚ùå Error en Fase 3 - Proceso incompleto", level="ERROR")
            self.log("‚ö†Ô∏è Macro SeleccionarDirectorioGuardarEnCeldas fall√≥", level="ADVERTENCIA")
            # Excel ya est√° abierto, el usuario puede continuar manualmente
            return False
        
        # Proceso completado exitosamente
        self.log("üéâ ¬°PROCESO PASO 2 COMPLETADO EXITOSAMENTE!", level="EXITO")
        self.log("‚úÖ ‚úì Carpeta configurada autom√°ticamente", level="EXITO")
        self.log("‚úÖ ‚úì Tablas limpiadas autom√°ticamente", level="EXITO")
        self.log("‚úÖ ‚úì Directorio seleccionado y guardado", level="EXITO")
        self.log("‚úÖ ‚úì Excel listo para trabajo manual", level="EXITO")
        
        return True
    
    def _fallback_abrir_excel(self, excel_file_path: str):
        """Fallback: Abrir Excel manualmente si falla la automatizaci√≥n"""
        try:
            self.log("üîÑ Fallback: Abriendo Excel manualmente...", level="INFO")
            os.startfile(excel_file_path)
            self.log("üìÇ Excel abierto - configura manualmente si es necesario", level="INFO")
        except Exception as e:
            self.log(f"‚ùå Fallback fall√≥: {e}", level="ERROR")


def ejecutar_automatizacion_excel(excel_file_path: str, carpeta_descarga: str, 
                                 log_callback: Optional[Callable] = None) -> bool:
    """
    Funci√≥n principal para ejecutar automatizaci√≥n de Excel en Paso 2
    
    Args:
        excel_file_path: Ruta completa del archivo Excel MtM
        carpeta_descarga: Carpeta de descarga a configurar
        log_callback: Funci√≥n de logging (opcional)
        
    Returns:
        bool: True si el proceso fue exitoso
    """
    automator = ExcelAutomator(log_callback)
    return automator.proceso_completo_paso2(excel_file_path, carpeta_descarga)


if __name__ == "__main__":
    # Test b√°sico del m√≥dulo
    print("üß™ M√≥dulo Excel Automation - Paso 2 MtM")
    print("‚úÖ Importaci√≥n exitosa")