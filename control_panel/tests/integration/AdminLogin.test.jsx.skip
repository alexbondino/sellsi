/**
 * @jest-environment jsdom
 * 
 * Tests de integraci√≥n para AdminLogin
 * Cubre: Autenticaci√≥n, 2FA, errores, validaciones
 */

import { describe, it, expect, beforeEach, jest } from '@jest/globals'
import { render, screen, waitFor, fireEvent } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import '@testing-library/jest-dom'

// Mock de servicios
jest.unstable_mockModule('../../../src/domains/admin/services/adminAuthService.js', () => ({
  loginAdmin: jest.fn(),
  validateAdmin2FA: jest.fn(),
  requestPasswordReset: jest.fn()
}))

describe('AdminLogin - Integraci√≥n', () => {
  let AdminLogin
  let adminAuthService
  let user

  beforeEach(async () => {
    jest.clearAllMocks()
    
    AdminLogin = (await import('../../../src/domains/admin/components/AdminLogin.jsx')).default
    adminAuthService = await import('../../../src/domains/admin/services/adminAuthService.js')
    user = userEvent.setup()

    // Reset mocks
    adminAuthService.loginAdmin.mockReset()
    adminAuthService.validateAdmin2FA.mockReset()
  })

  describe('Renderizado y UI', () => {
    it('‚úÖ debe renderizar formulario de login', () => {
      render(<AdminLogin />)

      expect(screen.getByLabelText(/email/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/contrase√±a/i)).toBeInTheDocument()
      expect(screen.getByRole('button', { name: /iniciar sesi√≥n/i })).toBeInTheDocument()
    })

    it('‚úÖ debe mostrar logo de Sellsi', () => {
      render(<AdminLogin />)

      const logo = screen.getByAltText(/sellsi/i) || screen.getByTestId('sellsi-logo')
      expect(logo).toBeInTheDocument()
    })

    it('‚úÖ debe mostrar t√≠tulo de panel de control', () => {
      render(<AdminLogin />)

      expect(screen.getByText(/panel de control/i)).toBeInTheDocument()
    })

    it('‚úÖ debe mostrar link de recuperaci√≥n de contrase√±a', () => {
      render(<AdminLogin />)

      expect(screen.getByText(/olvidaste tu contrase√±a/i)).toBeInTheDocument()
    })

    it('‚úÖ debe mostrar checkbox de "Recordarme"', () => {
      render(<AdminLogin />)

      expect(screen.getByLabelText(/recordarme/i)).toBeInTheDocument()
    })
  })

  describe('Validaciones de formulario', () => {
    it('‚ùå debe mostrar error si email est√° vac√≠o', async () => {
      render(<AdminLogin />)

      const submitButton = screen.getByRole('button', { name: /iniciar sesi√≥n/i })
      await user.click(submitButton)

      await waitFor(() => {
        expect(screen.getByText(/email es requerido/i)).toBeInTheDocument()
      })
    })

    it('‚ùå debe validar formato de email', async () => {
      render(<AdminLogin />)

      const emailInput = screen.getByLabelText(/email/i)
      await user.type(emailInput, 'not-an-email')

      const submitButton = screen.getByRole('button', { name: /iniciar sesi√≥n/i })
      await user.click(submitButton)

      await waitFor(() => {
        expect(screen.getByText(/email inv√°lido/i)).toBeInTheDocument()
      })
    })

    it('‚ùå debe mostrar error si contrase√±a est√° vac√≠a', async () => {
      render(<AdminLogin />)

      const emailInput = screen.getByLabelText(/email/i)
      await user.type(emailInput, 'admin@sellsi.com')

      const submitButton = screen.getByRole('button', { name: /iniciar sesi√≥n/i })
      await user.click(submitButton)

      await waitFor(() => {
        expect(screen.getByText(/contrase√±a es requerida/i)).toBeInTheDocument()
      })
    })

    it('‚úÖ debe habilitar bot√≥n solo con campos v√°lidos', async () => {
      render(<AdminLogin />)

      const submitButton = screen.getByRole('button', { name: /iniciar sesi√≥n/i })
      expect(submitButton).toBeDisabled()

      const emailInput = screen.getByLabelText(/email/i)
      const passwordInput = screen.getByLabelText(/contrase√±a/i)

      await user.type(emailInput, 'admin@sellsi.com')
      await user.type(passwordInput, 'password123')

      await waitFor(() => {
        expect(submitButton).toBeEnabled()
      })
    })

    it('üîí debe ocultar contrase√±a por defecto', () => {
      render(<AdminLogin />)

      const passwordInput = screen.getByLabelText(/contrase√±a/i)
      expect(passwordInput).toHaveAttribute('type', 'password')
    })

    it('üëÅÔ∏è debe mostrar/ocultar contrase√±a al hacer clic', async () => {
      render(<AdminLogin />)

      const passwordInput = screen.getByLabelText(/contrase√±a/i)
      const toggleButton = screen.getByLabelText(/mostrar contrase√±a/i) || screen.getByTestId('toggle-password')

      await user.click(toggleButton)
      expect(passwordInput).toHaveAttribute('type', 'text')

      await user.click(toggleButton)
      expect(passwordInput).toHaveAttribute('type', 'password')
    })
  })

  describe('Login exitoso', () => {
    it('‚úÖ debe autenticar con credenciales v√°lidas', async () => {
      adminAuthService.loginAdmin.mockResolvedValue({
        success: true,
        session: { user: { id: 'admin-123' } },
        requires2FA: false
      })

      render(<AdminLogin />)

      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.type(screen.getByLabelText(/contrase√±a/i), 'password123')
      await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))

      await waitFor(() => {
        expect(adminAuthService.loginAdmin).toHaveBeenCalledWith('admin@sellsi.com', 'password123')
      })
    })

    it('‚úÖ debe mostrar loading durante autenticaci√≥n', async () => {
      adminAuthService.loginAdmin.mockImplementation(
        () => new Promise(resolve => setTimeout(() => resolve({
          success: true,
          session: { user: { id: 'admin-123' } }
        }), 100))
      )

      render(<AdminLogin />)

      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.type(screen.getByLabelText(/contrase√±a/i), 'password123')
      await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))

      expect(screen.getByRole('progressbar') || screen.getByText(/iniciando/i)).toBeInTheDocument()

      await waitFor(() => {
        expect(screen.queryByRole('progressbar')).not.toBeInTheDocument()
      }, { timeout: 200 })
    })

    it('‚úÖ debe redirigir al dashboard despu√©s de login', async () => {
      const mockNavigate = jest.fn()
      // Mock de react-router
      jest.mock('react-router-dom', () => ({
        useNavigate: () => mockNavigate
      }))

      adminAuthService.loginAdmin.mockResolvedValue({
        success: true,
        session: { user: { id: 'admin-123' } },
        requires2FA: false
      })

      render(<AdminLogin />)

      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.type(screen.getByLabelText(/contrase√±a/i), 'password123')
      await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))

      await waitFor(() => {
        expect(mockNavigate).toHaveBeenCalledWith('/admin/dashboard')
      })
    })
  })

  describe('Login con 2FA', () => {
    it('üîê debe mostrar formulario 2FA si est√° habilitado', async () => {
      adminAuthService.loginAdmin.mockResolvedValue({
        success: true,
        requires2FA: true,
        session: null
      })

      render(<AdminLogin />)

      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.type(screen.getByLabelText(/contrase√±a/i), 'password123')
      await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))

      await waitFor(() => {
        expect(screen.getByText(/c√≥digo de verificaci√≥n/i)).toBeInTheDocument()
        expect(screen.getByLabelText(/c√≥digo 2fa/i)).toBeInTheDocument()
      })
    })

    it('‚úÖ debe validar c√≥digo 2FA correcto', async () => {
      adminAuthService.loginAdmin.mockResolvedValue({
        success: true,
        requires2FA: true,
        session: null
      })

      adminAuthService.validateAdmin2FA.mockResolvedValue({
        success: true,
        valid: true,
        session: { user: { id: 'admin-123' } }
      })

      render(<AdminLogin />)

      // Login inicial
      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.type(screen.getByLabelText(/contrase√±a/i), 'password123')
      await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))

      // Ingresar c√≥digo 2FA
      await waitFor(() => {
        expect(screen.getByLabelText(/c√≥digo 2fa/i)).toBeInTheDocument()
      })

      await user.type(screen.getByLabelText(/c√≥digo 2fa/i), '123456')
      await user.click(screen.getByRole('button', { name: /verificar/i }))

      await waitFor(() => {
        expect(adminAuthService.validateAdmin2FA).toHaveBeenCalledWith(expect.anything(), '123456')
      })
    })

    it('‚ùå debe mostrar error si c√≥digo 2FA es incorrecto', async () => {
      adminAuthService.loginAdmin.mockResolvedValue({
        success: true,
        requires2FA: true,
        session: null
      })

      adminAuthService.validateAdmin2FA.mockResolvedValue({
        success: false,
        valid: false,
        error: 'C√≥digo inv√°lido'
      })

      render(<AdminLogin />)

      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.type(screen.getByLabelText(/contrase√±a/i), 'password123')
      await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))

      await waitFor(() => {
        expect(screen.getByLabelText(/c√≥digo 2fa/i)).toBeInTheDocument()
      })

      await user.type(screen.getByLabelText(/c√≥digo 2fa/i), '000000')
      await user.click(screen.getByRole('button', { name: /verificar/i }))

      await waitFor(() => {
        expect(screen.getByText(/c√≥digo inv√°lido/i)).toBeInTheDocument()
      })
    })

    it('‚úÖ debe permitir volver atr√°s desde 2FA', async () => {
      adminAuthService.loginAdmin.mockResolvedValue({
        success: true,
        requires2FA: true,
        session: null
      })

      render(<AdminLogin />)

      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.type(screen.getByLabelText(/contrase√±a/i), 'password123')
      await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))

      await waitFor(() => {
        expect(screen.getByText(/c√≥digo de verificaci√≥n/i)).toBeInTheDocument()
      })

      const backButton = screen.getByRole('button', { name: /volver/i })
      await user.click(backButton)

      await waitFor(() => {
        expect(screen.getByLabelText(/email/i)).toBeInTheDocument()
        expect(screen.getByLabelText(/contrase√±a/i)).toBeInTheDocument()
      })
    })
  })

  describe('Errores de autenticaci√≥n', () => {
    it('‚ùå debe mostrar error con credenciales incorrectas', async () => {
      adminAuthService.loginAdmin.mockResolvedValue({
        success: false,
        error: 'Credenciales inv√°lidas'
      })

      render(<AdminLogin />)

      await user.type(screen.getByLabelText(/email/i), 'wrong@email.com')
      await user.type(screen.getByLabelText(/contrase√±a/i), 'wrongpass')
      await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))

      await waitFor(() => {
        expect(screen.getByText(/credenciales inv√°lidas/i)).toBeInTheDocument()
      })
    })

    it('üîí debe bloquear despu√©s de m√∫ltiples intentos fallidos', async () => {
      adminAuthService.loginAdmin.mockResolvedValue({
        success: false,
        error: 'Demasiados intentos. Cuenta bloqueada por 15 minutos.'
      })

      render(<AdminLogin />)

      // Simular 5 intentos fallidos
      for (let i = 0; i < 5; i++) {
        await user.clear(screen.getByLabelText(/email/i))
        await user.clear(screen.getByLabelText(/contrase√±a/i))
        await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
        await user.type(screen.getByLabelText(/contrase√±a/i), 'wrong')
        await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))
        await waitFor(() => screen.getByText(/credenciales inv√°lidas/i))
      }

      await waitFor(() => {
        expect(screen.getByText(/cuenta bloqueada/i)).toBeInTheDocument()
      })
    })

    it('‚ùå debe manejar error de red', async () => {
      adminAuthService.loginAdmin.mockRejectedValue(new Error('Network error'))

      render(<AdminLogin />)

      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.type(screen.getByLabelText(/contrase√±a/i), 'password123')
      await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))

      await waitFor(() => {
        expect(screen.getByText(/error de conexi√≥n/i)).toBeInTheDocument()
      })
    })
  })

  describe('Recuperaci√≥n de contrase√±a', () => {
    it('‚úÖ debe mostrar formulario de recuperaci√≥n', async () => {
      render(<AdminLogin />)

      const forgotPasswordLink = screen.getByText(/olvidaste tu contrase√±a/i)
      await user.click(forgotPasswordLink)

      await waitFor(() => {
        expect(screen.getByText(/recuperar contrase√±a/i)).toBeInTheDocument()
        expect(screen.getByLabelText(/email/i)).toBeInTheDocument()
      })
    })

    it('‚úÖ debe enviar email de recuperaci√≥n', async () => {
      adminAuthService.requestPasswordReset.mockResolvedValue({
        success: true,
        message: 'Email enviado'
      })

      render(<AdminLogin />)

      await user.click(screen.getByText(/olvidaste tu contrase√±a/i))
      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.click(screen.getByRole('button', { name: /enviar/i }))

      await waitFor(() => {
        expect(adminAuthService.requestPasswordReset).toHaveBeenCalledWith('admin@sellsi.com')
        expect(screen.getByText(/email enviado/i)).toBeInTheDocument()
      })
    })

    it('‚ùå debe mostrar error si email no existe', async () => {
      adminAuthService.requestPasswordReset.mockResolvedValue({
        success: false,
        error: 'Email no encontrado'
      })

      render(<AdminLogin />)

      await user.click(screen.getByText(/olvidaste tu contrase√±a/i))
      await user.type(screen.getByLabelText(/email/i), 'noexiste@email.com')
      await user.click(screen.getByRole('button', { name: /enviar/i }))

      await waitFor(() => {
        expect(screen.getByText(/email no encontrado/i)).toBeInTheDocument()
      })
    })
  })

  describe('Seguridad', () => {
    it('üîí debe sanitizar inputs', async () => {
      const maliciousEmail = "<script>alert('xss')</script>@email.com"

      render(<AdminLogin />)

      await user.type(screen.getByLabelText(/email/i), maliciousEmail)
      
      const emailInput = screen.getByLabelText(/email/i)
      expect(emailInput.value).not.toContain('<script>')
    })

    it('üõ°Ô∏è debe usar HTTPS para login', async () => {
      // Verificar que la URL de la API use HTTPS
      adminAuthService.loginAdmin.mockImplementation((email, password) => {
        expect(global.location.protocol).toBe('https:')
        return Promise.resolve({ success: true })
      })

      render(<AdminLogin />)

      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.type(screen.getByLabelText(/contrase√±a/i), 'password123')
      await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))

      await waitFor(() => {
        expect(adminAuthService.loginAdmin).toHaveBeenCalled()
      })
    })

    it('üîê debe limpiar formulario despu√©s de error', async () => {
      adminAuthService.loginAdmin.mockResolvedValue({
        success: false,
        error: 'Credenciales inv√°lidas'
      })

      render(<AdminLogin />)

      const passwordInput = screen.getByLabelText(/contrase√±a/i)
      
      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.type(passwordInput, 'wrongpass')
      await user.click(screen.getByRole('button', { name: /iniciar sesi√≥n/i }))

      await waitFor(() => {
        expect(screen.getByText(/credenciales inv√°lidas/i)).toBeInTheDocument()
        expect(passwordInput.value).toBe('') // Contrase√±a debe limpiarse
      })
    })
  })

  describe('Accesibilidad', () => {
    it('‚ôø debe tener labels correctos', () => {
      render(<AdminLogin />)

      expect(screen.getByLabelText(/email/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/contrase√±a/i)).toBeInTheDocument()
    })

    it('‚å®Ô∏è debe permitir navegaci√≥n por teclado', async () => {
      render(<AdminLogin />)

      const emailInput = screen.getByLabelText(/email/i)
      const passwordInput = screen.getByLabelText(/contrase√±a/i)
      const submitButton = screen.getByRole('button', { name: /iniciar sesi√≥n/i })

      emailInput.focus()
      await user.keyboard('[Tab]')
      expect(passwordInput).toHaveFocus()

      await user.keyboard('[Tab]')
      expect(submitButton).toHaveFocus()
    })

    it('‚úÖ debe soportar Enter para submit', async () => {
      adminAuthService.loginAdmin.mockResolvedValue({
        success: true,
        session: { user: { id: 'admin-123' } }
      })

      render(<AdminLogin />)

      await user.type(screen.getByLabelText(/email/i), 'admin@sellsi.com')
      await user.type(screen.getByLabelText(/contrase√±a/i), 'password123{Enter}')

      await waitFor(() => {
        expect(adminAuthService.loginAdmin).toHaveBeenCalled()
      })
    })
  })
})
