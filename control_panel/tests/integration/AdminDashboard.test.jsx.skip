/**
 * @jest-environment jsdom
 * 
 * Tests de integraci√≥n para AdminDashboard
 * Cubre: Renderizado, navegaci√≥n, tabs, estados
 */

import { describe, it, expect, beforeEach, jest } from '@jest/globals'
import { render, screen, waitFor, fireEvent } from '@testing-library/react'
import '@testing-library/jest-dom'

// Mock de componentes hijos
jest.unstable_mockModule('../../../src/domains/admin/components/UserManagementTable.jsx', () => ({
  default: () => <div data-testid="user-management">User Management</div>
}))

jest.unstable_mockModule('../../../src/domains/admin/components/PaymentReleasesTable.jsx', () => ({
  default: () => <div data-testid="payment-releases">Payment Releases</div>
}))

jest.unstable_mockModule('../../../src/domains/admin/components/ProductMarketplaceTable.jsx', () => ({
  default: () => <div data-testid="product-marketplace">Product Marketplace</div>
}))

// Mock de servicios
jest.unstable_mockModule('../../../src/domains/admin/services/adminAuthService.js', () => ({
  getCurrentSession: jest.fn(),
  isAdminAuthenticated: jest.fn()
}))

describe('AdminDashboard - Integraci√≥n', () => {
  let AdminDashboard
  let adminAuthService

  beforeEach(async () => {
    jest.clearAllMocks()
    
    AdminDashboard = (await import('../../../src/domains/admin/components/AdminDashboard.jsx')).default
    adminAuthService = await import('../../../src/domains/admin/services/adminAuthService.js')

    // Mock sesi√≥n activa por defecto
    adminAuthService.getCurrentSession.mockResolvedValue({
      success: true,
      session: {
        user: { id: 'admin-123', email: 'admin@sellsi.com' }
      }
    })

    adminAuthService.isAdminAuthenticated.mockReturnValue(true)
  })

  describe('Renderizado inicial', () => {
    it('‚úÖ debe renderizar el dashboard correctamente', async () => {
      render(<AdminDashboard />)

      await waitFor(() => {
        expect(screen.getByText(/Panel de Control/i)).toBeInTheDocument()
      })
    })

    it('‚úÖ debe mostrar el nombre del admin', async () => {
      adminAuthService.getCurrentSession.mockResolvedValue({
        success: true,
        session: {
          user: { id: 'admin-123', email: 'admin@sellsi.com', user_metadata: { name: 'Admin Principal' } }
        }
      })

      render(<AdminDashboard />)

      await waitFor(() => {
        expect(screen.getByText(/Admin Principal/i)).toBeInTheDocument()
      })
    })

    it('‚úÖ debe mostrar tabs de navegaci√≥n', async () => {
      render(<AdminDashboard />)

      await waitFor(() => {
        expect(screen.getByRole('tab', { name: /usuarios/i })).toBeInTheDocument()
        expect(screen.getByRole('tab', { name: /pagos/i })).toBeInTheDocument()
        expect(screen.getByRole('tab', { name: /productos/i })).toBeInTheDocument()
      })
    })

    it('‚úÖ debe mostrar tab activo por defecto', async () => {
      render(<AdminDashboard />)

      await waitFor(() => {
        const activeTab = screen.getByRole('tab', { selected: true })
        expect(activeTab).toBeInTheDocument()
      })
    })
  })

  describe('Navegaci√≥n entre tabs', () => {
    it('‚úÖ debe cambiar a tab de Usuarios', async () => {
      render(<AdminDashboard />)

      const usersTab = screen.getByRole('tab', { name: /usuarios/i })
      fireEvent.click(usersTab)

      await waitFor(() => {
        expect(screen.getByTestId('user-management')).toBeInTheDocument()
      })
    })

    it('‚úÖ debe cambiar a tab de Liberaci√≥n de Pagos', async () => {
      render(<AdminDashboard />)

      const paymentsTab = screen.getByRole('tab', { name: /pagos/i })
      fireEvent.click(paymentsTab)

      await waitFor(() => {
        expect(screen.getByTestId('payment-releases')).toBeInTheDocument()
      })
    })

    it('‚úÖ debe cambiar a tab de Productos', async () => {
      render(<AdminDashboard />)

      const productsTab = screen.getByRole('tab', { name: /productos/i })
      fireEvent.click(productsTab)

      await waitFor(() => {
        expect(screen.getByTestId('product-marketplace')).toBeInTheDocument()
      })
    })

    it('‚úÖ debe mantener estado al cambiar tabs', async () => {
      render(<AdminDashboard />)

      // Ir a Usuarios
      fireEvent.click(screen.getByRole('tab', { name: /usuarios/i }))
      await waitFor(() => {
        expect(screen.getByTestId('user-management')).toBeInTheDocument()
      })

      // Ir a Pagos
      fireEvent.click(screen.getByRole('tab', { name: /pagos/i }))
      await waitFor(() => {
        expect(screen.getByTestId('payment-releases')).toBeInTheDocument()
      })

      // Volver a Usuarios
      fireEvent.click(screen.getByRole('tab', { name: /usuarios/i }))
      await waitFor(() => {
        expect(screen.getByTestId('user-management')).toBeInTheDocument()
      })
    })
  })

  describe('Estados y permisos', () => {
    it('üîí debe redirigir si no est√° autenticado', async () => {
      adminAuthService.isAdminAuthenticated.mockReturnValue(false)

      render(<AdminDashboard />)

      await waitFor(() => {
        expect(screen.queryByText(/Panel de Control/i)).not.toBeInTheDocument()
      })
    })

    it('‚è≥ debe mostrar loading mientras carga sesi√≥n', async () => {
      adminAuthService.getCurrentSession.mockImplementation(
        () => new Promise(resolve => setTimeout(() => resolve({
          success: true,
          session: { user: { id: 'admin-123' } }
        }), 100))
      )

      render(<AdminDashboard />)

      expect(screen.getByRole('progressbar') || screen.getByText(/cargando/i)).toBeInTheDocument()

      await waitFor(() => {
        expect(screen.getByText(/Panel de Control/i)).toBeInTheDocument()
      }, { timeout: 200 })
    })

    it('‚ùå debe mostrar error si falla cargar sesi√≥n', async () => {
      adminAuthService.getCurrentSession.mockResolvedValue({
        success: false,
        error: 'Error de conexi√≥n'
      })

      render(<AdminDashboard />)

      await waitFor(() => {
        expect(screen.getByText(/error/i)).toBeInTheDocument()
      })
    })
  })

  describe('Interacciones del usuario', () => {
    it('‚úÖ debe mostrar men√∫ de usuario', async () => {
      render(<AdminDashboard />)

      const userButton = screen.getByLabelText(/cuenta/i) || screen.getByTestId('user-menu-button')
      fireEvent.click(userButton)

      await waitFor(() => {
        expect(screen.getByText(/cerrar sesi√≥n/i)).toBeInTheDocument()
      })
    })

    it('‚úÖ debe cerrar sesi√≥n correctamente', async () => {
      const mockLogout = jest.fn()
      adminAuthService.logoutAdmin = mockLogout

      render(<AdminDashboard />)

      const userButton = screen.getByLabelText(/cuenta/i) || screen.getByTestId('user-menu-button')
      fireEvent.click(userButton)

      const logoutButton = screen.getByText(/cerrar sesi√≥n/i)
      fireEvent.click(logoutButton)

      await waitFor(() => {
        expect(mockLogout).toHaveBeenCalled()
      })
    })

    it('‚úÖ debe mostrar bot√≥n de configuraci√≥n', async () => {
      render(<AdminDashboard />)

      await waitFor(() => {
        const settingsButton = screen.getByLabelText(/configuraci√≥n/i) || screen.getByTestId('settings-button')
        expect(settingsButton).toBeInTheDocument()
      })
    })
  })

  describe('Responsive y UI', () => {
    it('üì± debe adaptarse a m√≥vil', async () => {
      global.innerWidth = 375
      global.dispatchEvent(new Event('resize'))

      render(<AdminDashboard />)

      await waitFor(() => {
        // Verificar que el men√∫ hamburguesa est√© presente en m√≥vil
        const mobileMenu = screen.queryByLabelText(/menu/i)
        expect(mobileMenu).toBeInTheDocument()
      })
    })

    it('üíª debe mostrar sidebar en desktop', async () => {
      global.innerWidth = 1920
      global.dispatchEvent(new Event('resize'))

      render(<AdminDashboard />)

      await waitFor(() => {
        const sidebar = screen.queryByRole('navigation')
        expect(sidebar).toBeInTheDocument()
      })
    })

    it('‚úÖ debe mostrar badge de notificaciones', async () => {
      render(<AdminDashboard />)

      await waitFor(() => {
        const notificationBadge = screen.queryByTestId('notification-badge')
        if (notificationBadge) {
          expect(notificationBadge).toBeInTheDocument()
        }
      })
    })
  })

  describe('Seguridad', () => {
    it('üîí debe validar permisos antes de mostrar tabs', async () => {
      adminAuthService.getCurrentSession.mockResolvedValue({
        success: true,
        session: {
          user: { id: 'admin-123', permissions: ['view_users'] }
        }
      })

      render(<AdminDashboard />)

      await waitFor(() => {
        expect(screen.getByRole('tab', { name: /usuarios/i })).toBeInTheDocument()
        // Tab de pagos podr√≠a estar oculto si no tiene permiso
      })
    })

    it('üõ°Ô∏è debe mostrar indicador de sesi√≥n segura', async () => {
      render(<AdminDashboard />)

      await waitFor(() => {
        const securityBadge = screen.queryByText(/sesi√≥n segura/i) || screen.queryByTestId('security-indicator')
        expect(securityBadge).toBeInTheDocument()
      })
    })

    it('‚è±Ô∏è debe mostrar tiempo de sesi√≥n restante', async () => {
      adminAuthService.getCurrentSession.mockResolvedValue({
        success: true,
        session: {
          user: { id: 'admin-123' },
          expires_at: Date.now() + 3600000 // 1 hora
        }
      })

      render(<AdminDashboard />)

      await waitFor(() => {
        const sessionTimer = screen.queryByTestId('session-timer')
        if (sessionTimer) {
          expect(sessionTimer).toBeInTheDocument()
        }
      })
    })
  })

  describe('Performance', () => {
    it('‚ö° debe cargar tabs de forma lazy', async () => {
      render(<AdminDashboard />)

      // Inicialmente solo deber√≠a cargar el tab activo
      await waitFor(() => {
        expect(screen.queryByTestId('user-management')).toBeInTheDocument()
        expect(screen.queryByTestId('payment-releases')).not.toBeInTheDocument()
      })

      // Al cambiar tab, carga el nuevo componente
      fireEvent.click(screen.getByRole('tab', { name: /pagos/i }))

      await waitFor(() => {
        expect(screen.getByTestId('payment-releases')).toBeInTheDocument()
      })
    })

    it('‚úÖ debe cachear datos de sesi√≥n', async () => {
      render(<AdminDashboard />)

      await waitFor(() => {
        expect(screen.getByText(/Panel de Control/i)).toBeInTheDocument()
      })

      // getCurrentSession solo deber√≠a llamarse una vez
      expect(adminAuthService.getCurrentSession).toHaveBeenCalledTimes(1)
    })
  })
})
